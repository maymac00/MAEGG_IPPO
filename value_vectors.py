import numpy as np

eff_rates = [0.2, 0.4, 0.6, 0.8]
policies = {eff: {} for eff in eff_rates}
# eff 0.2
policies[0.2][0] = np.array([ [-10.3, -0.42],[-494.68, -0.09],[-492.26, -0.0],[-494.61, -0.03],[-493.91, -0.15] ])
policies[0.2][1] = np.array([ [-61.74, 36.18],[-347.48, 0.06],[-268.15, 0.0],[-278.27, 0.0],[-294.16, 0.0] ])
policies[0.2][10] = np.array([ [-71.4, 42.2],[-301.08, 1.0],[-323.71, 0.0],[-305.34, 1.1],[-302.73, 1.46] ])
policies[0.2][1000] = np.array(
    [[54.1548, -98.874], [0., -312.81], [1.792, -313.972], [1.1922, -347.648], [0., -320.584]])

# eff 0.4
policies[0.4][0] = np.array([ [-39.23, 0.0],[-17.52, -0.02],[-494.15, -0.02],[-498.25, 0.0],[-498.91, 0.0] ])
policies[0.4][1] = np.array(
    [[15.0858, -52.226], [14.6916, -54.], [0.2534, -209.446], [1.820e-01, -2.204e+02], [1.75000e-01, -2.20772e+02]])
policies[0.4][10] = np.array([ [-69.22, 16.97],[-55.11, 18.73],[-211.69, 0.18],[-237.32, 0.44],[-197.23, 0.95] ])
# place holder
policies[0.4][1000] = np.array([ [-97.96, 35.91],[-103.74, 33.32],[-222.44, 4.88],[-202.57, 4.36],[-222.12, 4.25] ])


# eff 0.6
policies[0.6][0] = np.array([[-52.54, -0.02], [-52.45, -0.16], [-64.26, -0.08], [-498.96, 0.0], [-498.2, 0.0]])
policies[0.6][1] = np.array([ [-68.69, 7.83],[-71.55, 7.52],[-72.23, 7.48],[-194.56, 0.01],[-187.42, 0.02] ])
policies[0.6][10] = np.array([ [-76.56, 9.49],[-70.37, 10.25],[-66.64, 10.61],[-191.0, 0.04],[-185.78, 0.12] ])
policies[0.6][1000] = np.array([[-111.12, 30.99], [-107.13, 31.55], [-109.48, 31.02], [-196.85, 4.12], [-193.17, 4.25]])

# eff 0.8
policies[0.8][0] = np.array([ [-93.78, 0.0],[-90.05, -0.04],[-91.53, -0.0],[-98.32, -0.24],[-498.42, 0.0] ])
policies[0.8][1] = np.array([ [-88.14, 4.38],[-99.09, 3.48],[-98.87, 3.5],[-94.44, 3.99],[-183.53, 0.01] ])
policies[0.8][10] = np.array([ [-98.11, 5.32],[-77.71, 7.55],[-100.09, 5.42],[-99.91, 5.14],[-188.79, 0.02] ])
policies[0.8][1000] = np.array([ [-125.1, 30.91],[-122.76, 30.96],[-125.19, 29.29],[-123.75, 30.25],[-174.95, 0.0] ])


validations = {eff: {} for eff in eff_rates}
# eff 0.2
validations[0.2][10] = 0 # Not yet
validations[0.2][1000] = 0 # Not yet
# eff 0.4
validations[0.4][10] = np.array([ [-44.7, 19.48],[-54.75, 17.29],[-193.98, 0.0],[-232.76, 0.0],[-193.55, 0.88] ])
validations[0.4][1000] = np.array([ [-103.0, 44.18],[-100.6, 44.62],[-208.18, 0.0],[-212.86, 0.0],[-222.32, 0.0] ]) # Inefficient do not donate

# eff 0.6
validations[0.6][10] = np.array([ [-65.94, 9.65],[-64.41, 9.74],[-64.35, 9.82],[-174.54, 0.0],[-191.84, 0.0] ])
validations[0.6][1000] = np.array([ [-115.51, 36.19],[-117.14, 35.2],[-104.84, 40.22],[-166.64, 0.0],[-198.98, 0.0] ]) # Inefficient do not donate

# eff 0.8

pass

for eff in eff_rates:
    for db in [0, 1, 10, 1000]:
        try:
            if policies[eff][db][0, 0] > policies[eff][db][0, 1]:
                policies[eff][db] = policies[eff][db][:, ::-1]
            if db == 0:
                policies[eff][db][:, 1] = 0

            if validations[eff][db][0, 0] > validations[eff][db][0, 1]:
                validations[eff][db] = validations[eff][db][:, ::-1]
            if db == 0:
                validations[eff][db][:, 1] = 0

        except:
            continue

get_ind = lambda eff, db: policies[eff][db][:int(eff * 5), 1]
get_et = lambda eff, db: policies[eff][db][:int(eff * 5), 0]
